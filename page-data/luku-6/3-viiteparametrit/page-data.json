{"componentChunkName":"component---src-templates-course-content-template-js","path":"/luku-6/3-viiteparametrit","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"div","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"lead","properties":{},"children":[{"type":"text","value":"Tässä osiossa esitellään, kuinka viiteparametreja käytetään kutsuvassa rutiinissa ja kuinka niihin viitataan aliohjelmissa."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Viiteparametrit"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Viiteparametrien käyttäminen on usein ainoa järkevä tapa välittää rakenteista tietoa aliohjelmille. Usein rakenteinen tieto on sen verran suurta, että sitä ei haluta kopioida moneen kertaan. Toisaalta taas joidenkin järjestelmien aliohjelmien toteutus voi olla tehokkuussyistä rakennettu niin, että aktivointitietueen (AT) koko on rajattu. Jotkut ohjelmointikielet antavat myös parametreille kokorajoituksia, jolloin parametrit (ja paluuarvo) voivat olla ainoastaan yksinkertaisia tietotyyppejä. Joissakin ohjelmointikielissä sallitaan esim. taulukoiden käyttö parametreina, mutta ne voi silti käytännössä olla toteutettu viiteparametrien avulla."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Aivan samalla tavalla myös suuret paikalliset tietorakenteet kasvattavat AT:n kokoa huomattavasti, mikä voi vaikuttaa merkittävästi toteutuksen tehokkuuteen. Tämän vuoksi jotkut ohjelmointikielet rajaavat myös AT:hen talletettavien paikallisten tietorakenteiden kokoa."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Käytämme tässä esimerkkinä funktiota fB(r,s,t), joka palauttaa arvonaan lausekkeen x*y+z arvon. Parametri x on arvoparametri. Parametrit y ja z ovat viiteparametreja. Funktiota fB käytetään lauseen t = fB(r,s,t) toteutuksessa, kun r, s ja t ovat globaaleja muuttujia. Funktion kutsu on hyvin samanlainen kuin aikaisemminkin, mutta nyt funktiolle välitetään s:n ja t:n osoitteet. Viiteparametri voi olla tavallinen yksinkertainen muuttuja, mutta usein viiteparametrilla välitetään rakenteista tietoa."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"r   dc 24\ns   dc 56\nt   dc 77\npt  dc  0          ; osoitin, joka tulee osoittamaan t:hen\n    ...\n    load r1, =t\n    store r1, pt   ; alusta osoitinmuuttuja pt\n    ...\n;\n; toteuta lause t = fB(r,s,t)\n;\n     push sp, =0    ; tila paluuarvolle\n     push sp, r     ; r:n arvo\n     push sp, =s    ; s:n osoite\n     push sp, pt    ; pt:n arvo eli t:n osoite\n     call sp, fB\n     pop sp, r1\n     store r1, t"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Viiteparametreihin viittaamisessa täytyy muistaa, että parametrina on annettu vasta viitattavan tiedon osoite eikä sen arvoa. Yksinkertaiseen tietoon viittaus on silti helppo toteuttaa epäsuoraa tiedonosoitusmoodia käyttäen. Helppo tapa pitää viiteparametrit erillään arvoparametreista on nimetä ne vähän eri tavalla."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":";\n; funktio fB(x,y,z).  X on arvoparametri. Y ja Z ovat viiteparametreja.\n;\nretfB   equ  -5    ; paluuarvon suhteellinen osoite\nparX    equ -4     ; arvoparametrin X suhteellinen osoite AT:ssä\nvparY   equ -3     ; viiteparametrin Y suhteellinen osoite AT:ssä\nvparZ   equ -2     ; viiteparametrin Z suhteellinen osoite AT:ssä\n\nfB      push sp, r1  ; talleta r1\n\n        load r1, parX(fp)   ; laske X*Y+Z\n        mul  r1, @vparY(fp)  ; huomaa epäsuoran tiedonosoitusmoodin käyttö\n        add  r1, @vparZ(fp)\n\n        store r1, retfB(fp) ; talleta paluuarvo\n\n        pop sp, r1 ; palauta r1\n        exit sp, =3"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Yksiulotteisiin taulukoihin viittaaminen aliohjelmissa on vaikeampaa kuin pääohjelmatasolla, koska kaikki viittaukset täytyy tehdä osoitinmuuttujien kautta. Emme voi suoraan hyödyntää indeksoitua tiedonosoitusmoodia. Esimerkiksi, jos viiteparametrina on annettu taulukon T osoite, niin lauseen r1=T[r2] toteutus vaatii erikseen viitatun taulukon alkion sijainnin laskemisen."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"        ...\n        load r3, vparT(fp)   ; parametritaulukon T osoite\n        add r3, r2           ; alkion T[r2] osoite\n        load r1, 0(r3)       ; alkion T[r2] arvo\n        ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sen sijaan tietueisiin viittaaminen viiteparametrin kautta toimii ihan samalla tavalla kuin pääohjelmatasollakin. Esimerkkinä on tyyppiä Person oleva tietue, jonka kentät ovat Number, Age ja Salary. Aliohjelman parametri vparP osoittaa tyyppiä Person olevaan tietueeseen."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"        ...\nNumber  equ  0   ; kentän Number suhteelinen sijainti tietueessa\nAge     equ  1\nSalary  equ  2\n        ...\n        load r3, vparP(fp)   ; viitatun tietueen osoite\n        load r1, Age(r3)     ; kentän Age arvo\n        ..."}]}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Ulostuloparametrit"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ulostuloparametrit ovat tavallisia viiteparametreja, joita käytetään parametrina välitetyn tietorakenteen muokkaamiseen. Esimerkiksi aikaisemmin mainitun kuvan käsittelyn yhteydessä tämän on selvästi järkevin vaihtoehto, koska näin vältetään suurehkon kuvan kopiointi jokaisen kuvankäsittelyrutiinin kutsun ja paluun yhteydessä."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"   push sp, =0      ; paluuarvo\n   push sp, =photo  ; manipuloitava kuva\n   push sp, =op1    ; haluttu kuvankäsittelyoperaatio\n   call  sp, photoedit\n   pop sp, r1\n   jneq r1, badresult"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Useissa ohjelmointikielissä rajataan funktion paluuarvon tyyppi yksinkertaiseen tietotyyppiin. Tällaisissa tapauksissa moniarvoisen funktion voi helposti toteuttaa käyttämällä useaa ulostuloparametria."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"vparX  equ -4\nvparY  equ -3\nvparZ  equ -2\n\nS     pushr sp   ; talleta rekisterit\n      ...\n      ...        ; laske tulokset rekistereihin r1, r2, r3\n      ...\n      store r1, @vparX(fp)  ; palauta tulokset viiteparametrien kautta\n      store r2, @vparY(fp)\n      store r3, @vparZ(fp)\n\n      popr sp\n      exit sp, =3"}]}]}]},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Viiteparametrien riskit"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Toisaalta jokainen viiteparametri voi olla riski, koska sen kautta aliohjelma pääsee muuttamaan kutsuvan rutiinin dataa. Esimerkiksi, jos henkilörekisterin palkkataulukko annetaan parametrina tulostusrutiinille, niin olisi toivottavaa, että tulostusrutiini ei muuta käyttäjien palkkatietoja samalla. Tällaista "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"hyökkäystä"}]},{"type":"text","value":" vastaan voi suojautua käyttämällä vain luotettavissa kirjastoissa olevia tulostusrutiineja."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Joissakin ohjelmointikielissä kaikki merkkijonot välitetään viiteparametreina, jolloin aliohjelmat voisivat manipuloida parametreina annettuja merkkijonoja haluamikseen. Tältä voidaan suojautua tallettamalla merkkijonot "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"read only"}]},{"type":"text","value":" -muistialueelle ja rajaamalla merkkijonojen käsittely luotettaville kirjastoaliohjelmille."}]}]},"html":"<div><div>\n<lead>Tässä osiossa esitellään, kuinka viiteparametreja käytetään kutsuvassa rutiinissa ja kuinka niihin viitataan aliohjelmissa.</lead>\n</div><h2>Viiteparametrit</h2><p>Viiteparametrien käyttäminen on usein ainoa järkevä tapa välittää rakenteista tietoa aliohjelmille. Usein rakenteinen tieto on sen verran suurta, että sitä ei haluta kopioida moneen kertaan. Toisaalta taas joidenkin järjestelmien aliohjelmien toteutus voi olla tehokkuussyistä rakennettu niin, että aktivointitietueen (AT) koko on rajattu. Jotkut ohjelmointikielet antavat myös parametreille kokorajoituksia, jolloin parametrit (ja paluuarvo) voivat olla ainoastaan yksinkertaisia tietotyyppejä. Joissakin ohjelmointikielissä sallitaan esim. taulukoiden käyttö parametreina, mutta ne voi silti käytännössä olla toteutettu viiteparametrien avulla.</p><p>Aivan samalla tavalla myös suuret paikalliset tietorakenteet kasvattavat AT:n kokoa huomattavasti, mikä voi vaikuttaa merkittävästi toteutuksen tehokkuuteen. Tämän vuoksi jotkut ohjelmointikielet rajaavat myös AT:hen talletettavien paikallisten tietorakenteiden kokoa.</p><p>Käytämme tässä esimerkkinä funktiota fB(r,s,t), joka palauttaa arvonaan lausekkeen x*y+z arvon. Parametri x on arvoparametri. Parametrit y ja z ovat viiteparametreja. Funktiota fB käytetään lauseen t = fB(r,s,t) toteutuksessa, kun r, s ja t ovat globaaleja muuttujia. Funktion kutsu on hyvin samanlainen kuin aikaisemminkin, mutta nyt funktiolle välitetään s:n ja t:n osoitteet. Viiteparametri voi olla tavallinen yksinkertainen muuttuja, mutta usein viiteparametrilla välitetään rakenteista tietoa.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">r   dc 24\ns   dc 56\nt   dc 77\npt  dc  0          ; osoitin, joka tulee osoittamaan t:hen\n    ...\n    load r1, =t\n    store r1, pt   ; alusta osoitinmuuttuja pt\n    ...\n;\n; toteuta lause t = fB(r,s,t)\n;\n     push sp, =0    ; tila paluuarvolle\n     push sp, r     ; r:n arvo\n     push sp, =s    ; s:n osoite\n     push sp, pt    ; pt:n arvo eli t:n osoite\n     call sp, fB\n     pop sp, r1\n     store r1, t</code></pre></div><p>Viiteparametreihin viittaamisessa täytyy muistaa, että parametrina on annettu vasta viitattavan tiedon osoite eikä sen arvoa. Yksinkertaiseen tietoon viittaus on silti helppo toteuttaa epäsuoraa tiedonosoitusmoodia käyttäen. Helppo tapa pitää viiteparametrit erillään arvoparametreista on nimetä ne vähän eri tavalla.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">;\n; funktio fB(x,y,z).  X on arvoparametri. Y ja Z ovat viiteparametreja.\n;\nretfB   equ  -5    ; paluuarvon suhteellinen osoite\nparX    equ -4     ; arvoparametrin X suhteellinen osoite AT:ssä\nvparY   equ -3     ; viiteparametrin Y suhteellinen osoite AT:ssä\nvparZ   equ -2     ; viiteparametrin Z suhteellinen osoite AT:ssä\n\nfB      push sp, r1  ; talleta r1\n\n        load r1, parX(fp)   ; laske X*Y+Z\n        mul  r1, @vparY(fp)  ; huomaa epäsuoran tiedonosoitusmoodin käyttö\n        add  r1, @vparZ(fp)\n\n        store r1, retfB(fp) ; talleta paluuarvo\n\n        pop sp, r1 ; palauta r1\n        exit sp, =3</code></pre></div><p>Yksiulotteisiin taulukoihin viittaaminen aliohjelmissa on vaikeampaa kuin pääohjelmatasolla, koska kaikki viittaukset täytyy tehdä osoitinmuuttujien kautta. Emme voi suoraan hyödyntää indeksoitua tiedonosoitusmoodia. Esimerkiksi, jos viiteparametrina on annettu taulukon T osoite, niin lauseen r1=T[r2] toteutus vaatii erikseen viitatun taulukon alkion sijainnin laskemisen.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        ...\n        load r3, vparT(fp)   ; parametritaulukon T osoite\n        add r3, r2           ; alkion T[r2] osoite\n        load r1, 0(r3)       ; alkion T[r2] arvo\n        ...</code></pre></div><p>Sen sijaan tietueisiin viittaaminen viiteparametrin kautta toimii ihan samalla tavalla kuin pääohjelmatasollakin. Esimerkkinä on tyyppiä Person oleva tietue, jonka kentät ovat Number, Age ja Salary. Aliohjelman parametri vparP osoittaa tyyppiä Person olevaan tietueeseen.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">        ...\nNumber  equ  0   ; kentän Number suhteelinen sijainti tietueessa\nAge     equ  1\nSalary  equ  2\n        ...\n        load r3, vparP(fp)   ; viitatun tietueen osoite\n        load r1, Age(r3)     ; kentän Age arvo\n        ...</code></pre></div><h2>Ulostuloparametrit</h2><p>Ulostuloparametrit ovat tavallisia viiteparametreja, joita käytetään parametrina välitetyn tietorakenteen muokkaamiseen. Esimerkiksi aikaisemmin mainitun kuvan käsittelyn yhteydessä tämän on selvästi järkevin vaihtoehto, koska näin vältetään suurehkon kuvan kopiointi jokaisen kuvankäsittelyrutiinin kutsun ja paluun yhteydessä.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   push sp, =0      ; paluuarvo\n   push sp, =photo  ; manipuloitava kuva\n   push sp, =op1    ; haluttu kuvankäsittelyoperaatio\n   call  sp, photoedit\n   pop sp, r1\n   jneq r1, badresult</code></pre></div><p>Useissa ohjelmointikielissä rajataan funktion paluuarvon tyyppi yksinkertaiseen tietotyyppiin. Tällaisissa tapauksissa moniarvoisen funktion voi helposti toteuttaa käyttämällä useaa ulostuloparametria.</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vparX  equ -4\nvparY  equ -3\nvparZ  equ -2\n\nS     pushr sp   ; talleta rekisterit\n      ...\n      ...        ; laske tulokset rekistereihin r1, r2, r3\n      ...\n      store r1, @vparX(fp)  ; palauta tulokset viiteparametrien kautta\n      store r2, @vparY(fp)\n      store r3, @vparZ(fp)\n\n      popr sp\n      exit sp, =3</code></pre></div><h2>Viiteparametrien riskit</h2><p>Toisaalta jokainen viiteparametri voi olla riski, koska sen kautta aliohjelma pääsee muuttamaan kutsuvan rutiinin dataa. Esimerkiksi, jos henkilörekisterin palkkataulukko annetaan parametrina tulostusrutiinille, niin olisi toivottavaa, että tulostusrutiini ei muuta käyttäjien palkkatietoja samalla. Tällaista <em>hyökkäystä</em> vastaan voi suojautua käyttämällä vain luotettavissa kirjastoissa olevia tulostusrutiineja.</p><p>Joissakin ohjelmointikielissä kaikki merkkijonot välitetään viiteparametreina, jolloin aliohjelmat voisivat manipuloida parametreina annettuja merkkijonoja haluamikseen. Tältä voidaan suojautua tallettamalla merkkijonot <em>read only</em> -muistialueelle ja rajaamalla merkkijonojen käsittely luotettaville kirjastoaliohjelmille.</p></div>","frontmatter":{"path":"/luku-6/3-viiteparametrit","title":"Viiteparametrit ja ulostuloparametrit"}},"allPages":{"edges":[{"node":{"id":"5b6302a2-c64b-508c-91c4-2db0957cc4b2","frontmatter":{"path":"/arvostelu-ja-kokeet","title":"Arvostelu ja kokeet"}}},{"node":{"id":"799b0272-abdf-59f0-b9b3-03947af42427","frontmatter":{"path":"/credits","title":"Tekijänoikeudet ja lisenssit"}}},{"node":{"id":"82621c5a-f915-50d4-828d-8eede35fdbf7","frontmatter":{"path":"/opettajille","title":"Opettajille ja opinto-ohjaajille"}}},{"node":{"id":"6ed176ef-1be8-53dc-8513-8c4e14a7ce38","frontmatter":{"path":"/osaamistavoitteet","title":"Osaamistavoitteet"}}},{"node":{"id":"62fa7239-7639-50e3-accb-d209fb4f0984","frontmatter":{"path":"/","title":""}}},{"node":{"id":"2d5ef803-9204-51b7-8d1b-891f29cac1ab","frontmatter":{"path":"/tukivaylat","title":"Tukiväylät"}}},{"node":{"id":"9374d347-238d-5d15-a799-d9e134097e9c","frontmatter":{"path":"/usein-kysytyt-kysymykset","title":"Usein kysytyt kysymykset"}}},{"node":{"id":"25d93020-25bf-51eb-97b6-bdc2d0248ede","frontmatter":{"path":"/luku-10/1-tulkitseminen-ohjelman-suoritustapana","title":"Tulkitseminen ohjelman suoritustapana"}}},{"node":{"id":"a49be168-fcf3-5169-95ff-fbb93911c744","frontmatter":{"path":"/luku-10/3-java-ohjelmien-suoritustavat","title":"Java-ohjelmien suoritustavat"}}},{"node":{"id":"96acc546-7537-5245-af40-c0a343f43e57","frontmatter":{"path":"/luku-10/2-java-virtuaalikone","title":"Java virtuaalikone (JVM)"}}},{"node":{"id":"4e1f7d23-545a-578e-8502-1c016428d15a","frontmatter":{"path":"/luku-10/4-emulointi-suorittimen-toteutustapana","title":"Emulointi suorittimen toteutustapana"}}},{"node":{"id":"cc1cb9ab-8bc3-59eb-b373-ef1ef4682363","frontmatter":{"path":"/luku-10","title":"Luku 10: Tulkinta ja emulointi"}}},{"node":{"id":"f1365a76-4fbc-5542-9fa7-f3f1f5216696","frontmatter":{"path":"/luku-5/0-kertaus","title":"Perusteet-kurssin kertaus"}}},{"node":{"id":"22e14f18-d591-5b76-bc01-38d14cd680c5","frontmatter":{"path":"/luku-5/1-ttk-91","title":"Esimerkkitietokone ttk-91"}}},{"node":{"id":"d4832ed4-06c4-5023-94dd-c56d9b3c41aa","frontmatter":{"path":"/luku-5/2-valinta-ja-toistolauseet","title":"Ohjelmoinnin peruskäsitteet sekä valinta- ja toistolauseiden toteutus"}}},{"node":{"id":"adc41c13-389b-5ce4-a479-0caa5271449e","frontmatter":{"path":"/luku-5/4-optimoitu-koodi","title":"Optimoitu koodi"}}},{"node":{"id":"668ae475-1d6e-51a8-a31a-18fda782eae4","frontmatter":{"path":"/luku-5/3-rakenteinen-tieto","title":"Rakenteisen tiedon toteutus ja siihen viittaaminen"}}},{"node":{"id":"0ad1f9dc-df1c-5319-aab2-35699e72ce91","frontmatter":{"path":"/luku-5/5-titokone-titotrainer","title":"Titokone ja TitoTrainer"}}},{"node":{"id":"2373db22-c9f3-579a-83a5-7da1843c4181","frontmatter":{"path":"/luku-5","title":"Luku 5: Konekielinen ohjelmointi"}}},{"node":{"id":"9fb3f792-821e-5683-b13f-aa15c30ea444","frontmatter":{"path":"/luku-6/1-aliohjelmat","title":"Aliohjelmat, parametrityypit, aktivaatiotietue (AT)"}}},{"node":{"id":"b2137737-4997-5b6f-9c79-f81a20870ffe","frontmatter":{"path":"/luku-6/2-akt-tiet-rakentaminen","title":"Aktivaatiotietueen rakentaminen"}}},{"node":{"id":"d73cb6c1-d9fa-55c6-be7f-55c899bef652","frontmatter":{"path":"/luku-6/3-viiteparametrit","title":"Viiteparametrit ja ulostuloparametrit"}}},{"node":{"id":"6b15a20b-2879-57a1-b9a2-321c9c0bdeee","frontmatter":{"path":"/luku-6/4-kj-palvelut","title":"Käyttöjärjestelmäpalvelujen käyttö"}}},{"node":{"id":"9dd0cfca-308d-52e9-b7c9-87bd80b1e3ec","frontmatter":{"path":"/luku-6","title":"Luku 6: Aliohjelmien toteutus"}}},{"node":{"id":"550311b6-6492-58a1-ac20-c4c6ded21215","frontmatter":{"path":"/luku-7/1-vika-virhe-hairio","title":"Vika, virhe ja häiriö"}}},{"node":{"id":"d078f99d-62b5-5564-ba0d-0db0a1a125e9","frontmatter":{"path":"/luku-7/3-muisti-cache-ssd","title":"Järjestelmän sisäisten muistien toteutus"}}},{"node":{"id":"ea808cef-5af4-5657-a911-c57be158f85f","frontmatter":{"path":"/luku-7/2-tiedon-muuttumattomuus","title":"Tiedon muuttumattomuuden turvaaminen"}}},{"node":{"id":"416d64ce-5ffe-5e05-ba25-661028cbe13b","frontmatter":{"path":"/luku-7","title":"Luku 7: Tiedon muuttumattomuus ja erilaiset muistit"}}},{"node":{"id":"e0ee5976-ad00-5b27-8809-adc036d067bc","frontmatter":{"path":"/luku-8/1-muistihierarkia","title":"Muistihierarkia ja virtuaalimuisti"}}},{"node":{"id":"1ceaef01-e5c2-58d4-8898-e980f9d6ac9a","frontmatter":{"path":"/luku-8/2-tiedostot-massamuisti","title":"Tiedostojärjestelmä, tiedostot ja massamuisti"}}},{"node":{"id":"9b30c941-92d6-56de-9b5a-d476a488677a","frontmatter":{"path":"/luku-8/3-io-toteutus","title":"I/O:n toteutus"}}},{"node":{"id":"7967b05d-f768-543f-9069-20c79559cf74","frontmatter":{"path":"/luku-8","title":"Luku 8: Ulkoisen muistin käyttö ja I/O:n toteutus"}}},{"node":{"id":"a4421758-c50f-5cad-8743-46b4fa6d731f","frontmatter":{"path":"/luku-9/1-lausekielesta-suoritukseen","title":"Lausekielestä suoritukseen"}}},{"node":{"id":"d5e20fce-1056-5299-8c49-8e44bc54cdfc","frontmatter":{"path":"/luku-9/2-kaantaminen","title":"Kääntäminen"}}},{"node":{"id":"285cf4c9-0cf8-500b-848d-ad9d9a76ce11","frontmatter":{"path":"/luku-9/3-linkitys","title":"Linkitys"}}},{"node":{"id":"22e4b1ba-4ba7-5aad-98b6-0d4778090bca","frontmatter":{"path":"/luku-9/4-lataus","title":"Lataus"}}},{"node":{"id":"a18c72ea-cb8c-5f68-826e-b2e4ade4c972","frontmatter":{"path":"/luku-9","title":"Luku 9: Käännös, linkitys ja lataus"}}}]}},"pageContext":{}},"staticQueryHashes":["2283872788","994120085"]}